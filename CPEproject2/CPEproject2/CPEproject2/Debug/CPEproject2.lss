
CPEproject2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c9b  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a6d  00000000  00000000  0000107f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000054e  00000000  00000000  00001aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  0000203c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000557  00000000  00000000  00002118  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000025d  00000000  00000000  0000266f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000028cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__ctors_end>
   4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  10:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  14:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  18:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  1c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  20:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  24:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  28:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  2c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  30:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  34:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  38:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  3c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  40:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  44:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  48:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  4c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  50:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  54:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  58:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  5c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  60:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  68:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  6c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  70:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  74:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  78:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  7c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  80:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  84:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  88:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  8c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  90:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  94:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  98:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  9c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  a0:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  a4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  a8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  ac:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  b0:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  b4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  b8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  bc:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  c0:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  c4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  c8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  cc:	c9 00       	.word	0x00c9	; ????
  ce:	cd 00       	.word	0x00cd	; ????
  d0:	d1 00       	.word	0x00d1	; ????
  d2:	d5 00       	.word	0x00d5	; ????
  d4:	d9 00       	.word	0x00d9	; ????
  d6:	dd 00       	.word	0x00dd	; ????
  d8:	e0 00       	.word	0x00e0	; ????
  da:	e4 00       	.word	0x00e4	; ????
  dc:	e8 00       	.word	0x00e8	; ????
  de:	ec 00       	.word	0x00ec	; ????
  e0:	f0 00       	.word	0x00f0	; ????

000000e2 <__ctors_end>:
  e2:	11 24       	eor	r1, r1
  e4:	1f be       	out	0x3f, r1	; 63
  e6:	cf ef       	ldi	r28, 0xFF	; 255
  e8:	d8 e0       	ldi	r29, 0x08	; 8
  ea:	de bf       	out	0x3e, r29	; 62
  ec:	cd bf       	out	0x3d, r28	; 61
  ee:	0e 94 44 01 	call	0x288	; 0x288 <main>
  f2:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <_exit>

000000f6 <__bad_interrupt>:
  f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fa <tenth_delay>:
    }
}

void tenth_delay()
{
	TCNT1H = 0xF3;
  fa:	83 ef       	ldi	r24, 0xF3	; 243
  fc:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
	TCNT1L = 0xCB;
 100:	8b ec       	ldi	r24, 0xCB	; 203
 102:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1B = 0x04;
 106:	84 e0       	ldi	r24, 0x04	; 4
 108:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	while ( ( TIFR1& ( 0x1<<TOV1 ) ) == 0 );
 10c:	b0 9b       	sbis	0x16, 0	; 22
 10e:	fe cf       	rjmp	.-4      	; 0x10c <tenth_delay+0x12>
	
	TCCR1B = 0;
 110:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIFR1 = 0x1<<TOV1;
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	86 bb       	out	0x16, r24	; 22
 118:	08 95       	ret

0000011a <hundredth_delay>:
}

void hundredth_delay()
{
	TCNT1H = 0xFE;
 11a:	8e ef       	ldi	r24, 0xFE	; 254
 11c:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
	TCNT1L = 0xC7;
 120:	87 ec       	ldi	r24, 0xC7	; 199
 122:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1B = 0x04;
 126:	84 e0       	ldi	r24, 0x04	; 4
 128:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	while ( ( TIFR1& ( 0x1<<TOV1 ) ) == 0 );
 12c:	b0 9b       	sbis	0x16, 0	; 22
 12e:	fe cf       	rjmp	.-4      	; 0x12c <hundredth_delay+0x12>
	
	TCCR1B = 0;
 130:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIFR1 = 0x1<<TOV1;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	86 bb       	out	0x16, r24	; 22
 138:	08 95       	ret

0000013a <beep_init>:
}

void beep_init()
{
	BEEP_DDR = 0x10;
 13a:	80 e1       	ldi	r24, 0x10	; 16
 13c:	8d b9       	out	0x0d, r24	; 13
	BEEP_PORT = 0x00;
 13e:	1e b8       	out	0x0e, r1	; 14
 140:	08 95       	ret

00000142 <start_beep>:
}

void start_beep()
{
	BEEP_PORT = 0x10;
 142:	80 e1       	ldi	r24, 0x10	; 16
 144:	8e b9       	out	0x0e, r24	; 14
	tenth_delay();
 146:	0e 94 7d 00 	call	0xfa	; 0xfa <tenth_delay>
	BEEP_PORT = 0x00;
 14a:	1e b8       	out	0x0e, r1	; 14
 14c:	08 95       	ret

0000014e <stop_beep>:
}

void stop_beep()
{
	BEEP_PORT = 0x10;
 14e:	80 e1       	ldi	r24, 0x10	; 16
 150:	8e b9       	out	0x0e, r24	; 14
	for ( int i = 0; i < 5; i++ )
	{
		hundredth_delay();
 152:	0e 94 8d 00 	call	0x11a	; 0x11a <hundredth_delay>
 156:	0e 94 8d 00 	call	0x11a	; 0x11a <hundredth_delay>
 15a:	0e 94 8d 00 	call	0x11a	; 0x11a <hundredth_delay>
 15e:	0e 94 8d 00 	call	0x11a	; 0x11a <hundredth_delay>
 162:	0e 94 8d 00 	call	0x11a	; 0x11a <hundredth_delay>
	}
	BEEP_PORT = 0x00;
 166:	1e b8       	out	0x0e, r1	; 14
 168:	08 95       	ret

0000016a <stopwatch_init>:
}

void stopwatch_init()
{
	BUTTON_DDR = 0x00;
 16a:	11 b8       	out	0x01, r1	; 1
	BUTTON_PORT = 0xFF;
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	82 b9       	out	0x02, r24	; 2
 170:	08 95       	ret

00000172 <display_init>:
	}
}

void display_init()
{
	DDRD = 0xFF;
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x20;
 176:	80 e2       	ldi	r24, 0x20	; 32
 178:	8d b9       	out	0x0d, r24	; 13
	PORTD = 0x00;
 17a:	1b b8       	out	0x0b, r1	; 11
	PORTE = 0x00;
 17c:	1e b8       	out	0x0e, r1	; 14
 17e:	08 95       	ret

00000180 <display>:
}
void display(char num)
{
	switch(num)
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	8b 30       	cpi	r24, 0x0B	; 11
 184:	91 05       	cpc	r25, r1
 186:	70 f5       	brcc	.+92     	; 0x1e4 <display+0x64>
 188:	fc 01       	movw	r30, r24
 18a:	ea 59       	subi	r30, 0x9A	; 154
 18c:	ff 4f       	sbci	r31, 0xFF	; 255
 18e:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__tablejump2__>
	{
		case 0:
			PORTD = 0xFF;
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 196:	75 98       	cbi	0x0e, 5	; 14
			break;
 198:	08 95       	ret
		case 1:
			PORTD = 0x01;
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 19e:	75 98       	cbi	0x0e, 5	; 14
			break;
 1a0:	08 95       	ret
		case 2:
			PORTD = 0x02;
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 1a6:	75 98       	cbi	0x0e, 5	; 14
			break;
 1a8:	08 95       	ret
		case 3:
			PORTD = 0x04;
 1aa:	84 e0       	ldi	r24, 0x04	; 4
 1ac:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 1ae:	75 98       	cbi	0x0e, 5	; 14
			break;
 1b0:	08 95       	ret
		case 4:
			PORTD = 0x08;
 1b2:	88 e0       	ldi	r24, 0x08	; 8
 1b4:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 1b6:	75 98       	cbi	0x0e, 5	; 14
			break;
 1b8:	08 95       	ret
		case 5:
			PORTD = 0x00;
 1ba:	1b b8       	out	0x0b, r1	; 11
			PORTE |= (1<<PORTE5);
 1bc:	75 9a       	sbi	0x0e, 5	; 14
			break;
 1be:	08 95       	ret
		case 6:
			PORTD = 0x10;
 1c0:	80 e1       	ldi	r24, 0x10	; 16
 1c2:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 1c4:	75 98       	cbi	0x0e, 5	; 14
			break;
 1c6:	08 95       	ret
		case 7:
			PORTD = 0x20;
 1c8:	80 e2       	ldi	r24, 0x20	; 32
 1ca:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 1cc:	75 98       	cbi	0x0e, 5	; 14
			break;
 1ce:	08 95       	ret
		case 8:
			PORTD = 0x40;
 1d0:	80 e4       	ldi	r24, 0x40	; 64
 1d2:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 1d4:	75 98       	cbi	0x0e, 5	; 14
			break;
 1d6:	08 95       	ret
		case 9:
			PORTD = 0x80;
 1d8:	80 e8       	ldi	r24, 0x80	; 128
 1da:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 1dc:	75 98       	cbi	0x0e, 5	; 14
			break;
 1de:	08 95       	ret
		case 10: //for display off
			PORTD = 0x00;
 1e0:	1b b8       	out	0x0b, r1	; 11
			PORTE &= ~(1<<PORTE5);
 1e2:	75 98       	cbi	0x0e, 5	; 14
 1e4:	08 95       	ret

000001e6 <stopwatch>:
	BUTTON_DDR = 0x00;
	BUTTON_PORT = 0xFF;
}

unsigned int stopwatch()
{
 1e6:	cf 93       	push	r28
	unsigned int total_time = 0;
	unsigned int stopwatch_enable = 0;
	unsigned char stopwatch_counter = '0';
	
	if ( bit_is_clear( BUTTON_PIN, STOPWATCH_START ) )
 1e8:	07 99       	sbic	0x00, 7	; 0
 1ea:	18 c0       	rjmp	.+48     	; 0x21c <stopwatch+0x36>
	{
		while ( bit_is_clear( BUTTON_PIN, STOPWATCH_START ) );
 1ec:	07 9b       	sbis	0x00, 7	; 0
 1ee:	fe cf       	rjmp	.-4      	; 0x1ec <stopwatch+0x6>
		
		start_beep();
 1f0:	0e 94 a1 00 	call	0x142	; 0x142 <start_beep>

unsigned int stopwatch()
{
	unsigned int total_time = 0;
	unsigned int stopwatch_enable = 0;
	unsigned char stopwatch_counter = '0';
 1f4:	c0 e3       	ldi	r28, 0x30	; 48
		start_beep();
		stopwatch_enable = 1;
		
		while ( stopwatch_enable == 1 )
		{
			tenth_delay();
 1f6:	0e 94 7d 00 	call	0xfa	; 0xfa <tenth_delay>
			
			if ( stopwatch_counter == COUNTER_MAX )
 1fa:	c9 30       	cpi	r28, 0x09	; 9
 1fc:	29 f4       	brne	.+10     	; 0x208 <stopwatch+0x22>
			{
				stopwatch_counter = '0';
				display(stopwatch_counter);
 1fe:	80 e3       	ldi	r24, 0x30	; 48
 200:	0e 94 c0 00 	call	0x180	; 0x180 <display>
		{
			tenth_delay();
			
			if ( stopwatch_counter == COUNTER_MAX )
			{
				stopwatch_counter = '0';
 204:	c0 e3       	ldi	r28, 0x30	; 48
 206:	04 c0       	rjmp	.+8      	; 0x210 <stopwatch+0x2a>
				display(stopwatch_counter);
			}
			
			else
			{
				stopwatch_counter++;
 208:	cf 5f       	subi	r28, 0xFF	; 255
				display(stopwatch_counter);
 20a:	8c 2f       	mov	r24, r28
 20c:	0e 94 c0 00 	call	0x180	; 0x180 <display>
			}
			
			if ( bit_is_clear( BUTTON_PIN, STOPWATCH_STOP ) )
 210:	06 99       	sbic	0x00, 6	; 0
 212:	f1 cf       	rjmp	.-30     	; 0x1f6 <stopwatch+0x10>
			{
				while ( bit_is_clear( BUTTON_PIN, STOPWATCH_STOP ) );
 214:	06 9b       	sbis	0x00, 6	; 0
 216:	fe cf       	rjmp	.-4      	; 0x214 <stopwatch+0x2e>
				
				stop_beep();
 218:	0e 94 a7 00 	call	0x14e	; 0x14e <stop_beep>
				stopwatch_enable = 0;
			}
		}
	}
	return total_time;
}
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	cf 91       	pop	r28
 222:	08 95       	ret

00000224 <timer_mode>:
	while (bit_is_clear(UCSR0A, TXC)); //Wait until data transmit and buffer get empty
	UCSR0A |= ( 1<<TXC );
}*/

void timer_mode()
{
 224:	1f 93       	push	r17
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
	unsigned char input = 0;
 22a:	c0 e0       	ldi	r28, 0x00	; 0
	char inputmode = 1;
	while(inputmode)
	{
		if(bit_is_clear(BUTTON_PIN, TIMER_INPUT))
 22c:	05 99       	sbic	0x00, 5	; 0
 22e:	03 c0       	rjmp	.+6      	; 0x236 <timer_mode+0x12>
		{
			tenth_delay();
 230:	0e 94 7d 00 	call	0xfa	; 0xfa <tenth_delay>
			input++;
 234:	cf 5f       	subi	r28, 0xFF	; 255
		}
		if(bit_is_clear(BUTTON_PIN, TIMER_START))
 236:	04 99       	sbic	0x00, 4	; 0
 238:	f9 cf       	rjmp	.-14     	; 0x22c <timer_mode+0x8>
		{
			inputmode = 0;
			start_beep();
 23a:	0e 94 a1 00 	call	0x142	; 0x142 <start_beep>
		}
	}
	
	while(input > 0)
 23e:	cc 23       	and	r28, r28
 240:	b9 f0       	breq	.+46     	; 0x270 <timer_mode+0x4c>
	{
		display(input-- % 10);
 242:	1d ec       	ldi	r17, 0xCD	; 205
 244:	df ef       	ldi	r29, 0xFF	; 255
 246:	dc 0f       	add	r29, r28
 248:	c1 9f       	mul	r28, r17
 24a:	81 2d       	mov	r24, r1
 24c:	11 24       	eor	r1, r1
 24e:	86 95       	lsr	r24
 250:	86 95       	lsr	r24
 252:	86 95       	lsr	r24
 254:	88 0f       	add	r24, r24
 256:	98 2f       	mov	r25, r24
 258:	99 0f       	add	r25, r25
 25a:	99 0f       	add	r25, r25
 25c:	89 0f       	add	r24, r25
 25e:	c8 1b       	sub	r28, r24
 260:	8c 2f       	mov	r24, r28
 262:	0e 94 c0 00 	call	0x180	; 0x180 <display>
		tenth_delay();		
 266:	0e 94 7d 00 	call	0xfa	; 0xfa <tenth_delay>
		}
	}
	
	while(input > 0)
	{
		display(input-- % 10);
 26a:	cd 2f       	mov	r28, r29
			inputmode = 0;
			start_beep();
		}
	}
	
	while(input > 0)
 26c:	d1 11       	cpse	r29, r1
 26e:	ea cf       	rjmp	.-44     	; 0x244 <timer_mode+0x20>
	{
		display(input-- % 10);
		tenth_delay();		
	}
	
	while(bit_is_set(BUTTON_PIN, TIMER_START))
 270:	04 9b       	sbis	0x00, 4	; 0
 272:	06 c0       	rjmp	.+12     	; 0x280 <timer_mode+0x5c>
	{
		start_beep();
 274:	0e 94 a1 00 	call	0x142	; 0x142 <start_beep>
		tenth_delay();
 278:	0e 94 7d 00 	call	0xfa	; 0xfa <tenth_delay>
	{
		display(input-- % 10);
		tenth_delay();		
	}
	
	while(bit_is_set(BUTTON_PIN, TIMER_START))
 27c:	04 99       	sbic	0x00, 4	; 0
 27e:	fa cf       	rjmp	.-12     	; 0x274 <timer_mode+0x50>
	{
		start_beep();
		tenth_delay();
	}
}
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	08 95       	ret

00000288 <main>:
//void USART_TxChar(char data);

int main(void)
{
	//USART_Init();
	display_init();
 288:	0e 94 b9 00 	call	0x172	; 0x172 <display_init>
	stopwatch_init();
 28c:	0e 94 b5 00 	call	0x16a	; 0x16a <stopwatch_init>
	beep_init();
 290:	0e 94 9d 00 	call	0x13a	; 0x13a <beep_init>
	sei();
 294:	78 94       	sei
	
	//unsigned int stopwatch_time = 0;
	
    while (1) 
    {
		stopwatch();
 296:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <stopwatch>
		timer_mode();
 29a:	0e 94 12 01 	call	0x224	; 0x224 <timer_mode>
 29e:	fb cf       	rjmp	.-10     	; 0x296 <main+0xe>

000002a0 <__tablejump2__>:
 2a0:	ee 0f       	add	r30, r30
 2a2:	ff 1f       	adc	r31, r31
 2a4:	05 90       	lpm	r0, Z+
 2a6:	f4 91       	lpm	r31, Z
 2a8:	e0 2d       	mov	r30, r0
 2aa:	09 94       	ijmp

000002ac <_exit>:
 2ac:	f8 94       	cli

000002ae <__stop_program>:
 2ae:	ff cf       	rjmp	.-2      	; 0x2ae <__stop_program>
