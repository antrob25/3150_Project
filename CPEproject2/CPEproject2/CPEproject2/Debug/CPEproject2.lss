
CPEproject2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000304  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000388  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cb8  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a44  00000000  00000000  000010f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005b3  00000000  00000000  00001b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  000020e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000578  00000000  00000000  000021d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000031b  00000000  00000000  00002750  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002a6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__ctors_end>
   4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  10:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  14:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  18:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  1c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  20:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  24:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  28:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  2c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  30:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  34:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  38:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  3c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  40:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  44:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  48:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  4c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  50:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  54:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  58:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  5c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  60:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  68:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  6c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  70:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  74:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  78:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  7c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  80:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  84:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  88:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  8c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  90:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  94:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  98:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  9c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  a0:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  a4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  a8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  ac:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  b0:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  b4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  b8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  bc:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  c0:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  c4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  c8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  cc:	c7 00       	.word	0x00c7	; ????
  ce:	cb 00       	.word	0x00cb	; ????
  d0:	cf 00       	.word	0x00cf	; ????
  d2:	d3 00       	.word	0x00d3	; ????
  d4:	d7 00       	.word	0x00d7	; ????
  d6:	db 00       	.word	0x00db	; ????
  d8:	de 00       	.word	0x00de	; ????
  da:	e2 00       	.word	0x00e2	; ????
  dc:	e6 00       	.word	0x00e6	; ????
  de:	ea 00       	.word	0x00ea	; ????
  e0:	ee 00       	.word	0x00ee	; ????

000000e2 <__ctors_end>:
  e2:	11 24       	eor	r1, r1
  e4:	1f be       	out	0x3f, r1	; 63
  e6:	cf ef       	ldi	r28, 0xFF	; 255
  e8:	d8 e0       	ldi	r29, 0x08	; 8
  ea:	de bf       	out	0x3e, r29	; 62
  ec:	cd bf       	out	0x3d, r28	; 61
  ee:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <main>
  f2:	0c 94 80 01 	jmp	0x300	; 0x300 <_exit>

000000f6 <__bad_interrupt>:
  f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fa <tenth_delay>:
    }
}

void tenth_delay()
{
	TCNT1H = 0xF3;
  fa:	83 ef       	ldi	r24, 0xF3	; 243
  fc:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
	TCNT1L = 0xCB;
 100:	8b ec       	ldi	r24, 0xCB	; 203
 102:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1B = 0x04;
 106:	84 e0       	ldi	r24, 0x04	; 4
 108:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	while ( ( TIFR1& ( 0x1<<TOV1 ) ) == 0 );
 10c:	b0 9b       	sbis	0x16, 0	; 22
 10e:	fe cf       	rjmp	.-4      	; 0x10c <tenth_delay+0x12>
	
	TCCR1B = 0;
 110:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIFR1 = 0x1<<TOV1;
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	86 bb       	out	0x16, r24	; 22
 118:	08 95       	ret

0000011a <hundredth_delay>:
}

void hundredth_delay()
{
	TCNT1H = 0xFE;
 11a:	8e ef       	ldi	r24, 0xFE	; 254
 11c:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
	TCNT1L = 0xC7;
 120:	87 ec       	ldi	r24, 0xC7	; 199
 122:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1B = 0x04;
 126:	84 e0       	ldi	r24, 0x04	; 4
 128:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	while ( ( TIFR1& ( 0x1<<TOV1 ) ) == 0 );
 12c:	b0 9b       	sbis	0x16, 0	; 22
 12e:	fe cf       	rjmp	.-4      	; 0x12c <hundredth_delay+0x12>
	
	TCCR1B = 0;
 130:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIFR1 = 0x1<<TOV1;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	86 bb       	out	0x16, r24	; 22
 138:	08 95       	ret

0000013a <beep_init>:
}

void beep_init()
{
	BEEP_DDR |= ( 1<<PINE4 );
 13a:	6c 9a       	sbi	0x0d, 4	; 13
 13c:	08 95       	ret

0000013e <start_beep>:
}

void start_beep()
{
	BEEP_PORT = 0x10;
 13e:	80 e1       	ldi	r24, 0x10	; 16
 140:	8e b9       	out	0x0e, r24	; 14
	tenth_delay();
 142:	0e 94 7d 00 	call	0xfa	; 0xfa <tenth_delay>
	BEEP_PORT = 0x00;
 146:	1e b8       	out	0x0e, r1	; 14
 148:	08 95       	ret

0000014a <stop_beep>:
}

void stop_beep()
{
	BEEP_PORT = 0x10;
 14a:	80 e1       	ldi	r24, 0x10	; 16
 14c:	8e b9       	out	0x0e, r24	; 14
	for ( int i = 0; i < 5; i++ )
	{
		hundredth_delay();
 14e:	0e 94 8d 00 	call	0x11a	; 0x11a <hundredth_delay>
 152:	0e 94 8d 00 	call	0x11a	; 0x11a <hundredth_delay>
 156:	0e 94 8d 00 	call	0x11a	; 0x11a <hundredth_delay>
 15a:	0e 94 8d 00 	call	0x11a	; 0x11a <hundredth_delay>
 15e:	0e 94 8d 00 	call	0x11a	; 0x11a <hundredth_delay>
	}
	BEEP_PORT = 0x00;
 162:	1e b8       	out	0x0e, r1	; 14
 164:	08 95       	ret

00000166 <stopwatch_init>:
}

void stopwatch_init()
{
	BUTTON_DDR = 0x00;
 166:	11 b8       	out	0x01, r1	; 1
	BUTTON_PORT = 0xFF;
 168:	8f ef       	ldi	r24, 0xFF	; 255
 16a:	82 b9       	out	0x02, r24	; 2
 16c:	08 95       	ret

0000016e <display_init>:
	}
}

void display_init()
{
	DDRD = 0xFF;
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x20;
 172:	80 e2       	ldi	r24, 0x20	; 32
 174:	8d b9       	out	0x0d, r24	; 13
	PORTD = 0x00;
 176:	1b b8       	out	0x0b, r1	; 11
	PORTE = 0x00;
 178:	1e b8       	out	0x0e, r1	; 14
 17a:	08 95       	ret

0000017c <display>:
}
void display(char num)
{
	switch(num)
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	8b 30       	cpi	r24, 0x0B	; 11
 180:	91 05       	cpc	r25, r1
 182:	70 f5       	brcc	.+92     	; 0x1e0 <display+0x64>
 184:	fc 01       	movw	r30, r24
 186:	ea 59       	subi	r30, 0x9A	; 154
 188:	ff 4f       	sbci	r31, 0xFF	; 255
 18a:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__tablejump2__>
	{
		case 0:
			PORTD = 0xFF;
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 192:	75 98       	cbi	0x0e, 5	; 14
			break;
 194:	08 95       	ret
		case 1:
			PORTD = 0x01;
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 19a:	75 98       	cbi	0x0e, 5	; 14
			break;
 19c:	08 95       	ret
		case 2:
			PORTD = 0x02;
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 1a2:	75 98       	cbi	0x0e, 5	; 14
			break;
 1a4:	08 95       	ret
		case 3:
			PORTD = 0x04;
 1a6:	84 e0       	ldi	r24, 0x04	; 4
 1a8:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 1aa:	75 98       	cbi	0x0e, 5	; 14
			break;
 1ac:	08 95       	ret
		case 4:
			PORTD = 0x08;
 1ae:	88 e0       	ldi	r24, 0x08	; 8
 1b0:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 1b2:	75 98       	cbi	0x0e, 5	; 14
			break;
 1b4:	08 95       	ret
		case 5:
			PORTD = 0x00;
 1b6:	1b b8       	out	0x0b, r1	; 11
			PORTE |= (1<<PORTE5);
 1b8:	75 9a       	sbi	0x0e, 5	; 14
			break;
 1ba:	08 95       	ret
		case 6:
			PORTD = 0x10;
 1bc:	80 e1       	ldi	r24, 0x10	; 16
 1be:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 1c0:	75 98       	cbi	0x0e, 5	; 14
			break;
 1c2:	08 95       	ret
		case 7:
			PORTD = 0x20;
 1c4:	80 e2       	ldi	r24, 0x20	; 32
 1c6:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 1c8:	75 98       	cbi	0x0e, 5	; 14
			break;
 1ca:	08 95       	ret
		case 8:
			PORTD = 0x40;
 1cc:	80 e4       	ldi	r24, 0x40	; 64
 1ce:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 1d0:	75 98       	cbi	0x0e, 5	; 14
			break;
 1d2:	08 95       	ret
		case 9:
			PORTD = 0x80;
 1d4:	80 e8       	ldi	r24, 0x80	; 128
 1d6:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 1d8:	75 98       	cbi	0x0e, 5	; 14
			break;
 1da:	08 95       	ret
		case 10: //for display off
			PORTD = 0x00;
 1dc:	1b b8       	out	0x0b, r1	; 11
			PORTE &= ~(1<<PORTE5);
 1de:	75 98       	cbi	0x0e, 5	; 14
 1e0:	08 95       	ret

000001e2 <stopwatch>:
	BUTTON_DDR = 0x00;
	BUTTON_PORT = 0xFF;
}

void stopwatch()
{
 1e2:	ef 92       	push	r14
 1e4:	ff 92       	push	r15
 1e6:	0f 93       	push	r16
 1e8:	1f 93       	push	r17
 1ea:	cf 93       	push	r28
	unsigned int split_time_checkpoint = 0;
	unsigned int split_time;
	unsigned int stopwatch_enable = 0;
	unsigned char stopwatch_counter = '0';
	
	if ( bit_is_clear( BUTTON_PIN, STOPWATCH_START ) )
 1ec:	07 99       	sbic	0x00, 7	; 0
 1ee:	2a c0       	rjmp	.+84     	; 0x244 <stopwatch+0x62>
	{
		while ( bit_is_clear( BUTTON_PIN, STOPWATCH_START ) );
 1f0:	07 9b       	sbis	0x00, 7	; 0
 1f2:	fe cf       	rjmp	.-4      	; 0x1f0 <stopwatch+0xe>
		
		start_beep();
 1f4:	0e 94 9f 00 	call	0x13e	; 0x13e <start_beep>
 1f8:	01 e0       	ldi	r16, 0x01	; 1
 1fa:	10 e0       	ldi	r17, 0x00	; 0
{
	unsigned int total_time = 0;
	unsigned int split_time_checkpoint = 0;
	unsigned int split_time;
	unsigned int stopwatch_enable = 0;
	unsigned char stopwatch_counter = '0';
 1fc:	c0 e3       	ldi	r28, 0x30	; 48
}

void stopwatch()
{
	unsigned int total_time = 0;
	unsigned int split_time_checkpoint = 0;
 1fe:	e1 2c       	mov	r14, r1
 200:	f1 2c       	mov	r15, r1
 202:	01 c0       	rjmp	.+2      	; 0x206 <stopwatch+0x24>
 204:	8c 01       	movw	r16, r24
		start_beep();
		stopwatch_enable = 1;
		
		while ( stopwatch_enable == 1 )
		{
			tenth_delay();
 206:	0e 94 7d 00 	call	0xfa	; 0xfa <tenth_delay>
			
			if ( stopwatch_counter == COUNTER_MAX )
 20a:	c9 30       	cpi	r28, 0x09	; 9
 20c:	29 f4       	brne	.+10     	; 0x218 <stopwatch+0x36>
			{
				stopwatch_counter = '0';
				total_time++;
				display(stopwatch_counter);
 20e:	80 e3       	ldi	r24, 0x30	; 48
 210:	0e 94 be 00 	call	0x17c	; 0x17c <display>
		{
			tenth_delay();
			
			if ( stopwatch_counter == COUNTER_MAX )
			{
				stopwatch_counter = '0';
 214:	c0 e3       	ldi	r28, 0x30	; 48
 216:	04 c0       	rjmp	.+8      	; 0x220 <stopwatch+0x3e>
				display(stopwatch_counter);
			}
			
			else
			{
				stopwatch_counter++;
 218:	cf 5f       	subi	r28, 0xFF	; 255
				total_time++;
				display(stopwatch_counter);
 21a:	8c 2f       	mov	r24, r28
 21c:	0e 94 be 00 	call	0x17c	; 0x17c <display>
			}
			
			//when pressed, finds the time since last split and outputs it to serial
			if(bit_is_clear(BUTTON_PIN, STOPWATCH_SPLIT))
 220:	03 99       	sbic	0x00, 3	; 0
 222:	07 c0       	rjmp	.+14     	; 0x232 <stopwatch+0x50>
			{
				while ( bit_is_clear( BUTTON_PIN, STOPWATCH_SPLIT ) );
 224:	03 9b       	sbis	0x00, 3	; 0
 226:	fe cf       	rjmp	.-4      	; 0x224 <stopwatch+0x42>
				
				//Get the new checkpoint value to compare for next split
				split_time_checkpoint = total_time;
				
				//Output the split to serial
				OUTPUT_PORT = split_time;
 228:	c8 01       	movw	r24, r16
 22a:	8e 19       	sub	r24, r14
 22c:	9f 09       	sbc	r25, r15
 22e:	88 b9       	out	0x08, r24	; 8
 230:	78 01       	movw	r14, r16
 232:	c8 01       	movw	r24, r16
 234:	01 96       	adiw	r24, 0x01	; 1
				
			}
			
			if ( bit_is_clear( BUTTON_PIN, STOPWATCH_STOP ) )
 236:	06 99       	sbic	0x00, 6	; 0
 238:	e5 cf       	rjmp	.-54     	; 0x204 <stopwatch+0x22>
			{
				while ( bit_is_clear( BUTTON_PIN, STOPWATCH_STOP ) );
 23a:	06 9b       	sbis	0x00, 6	; 0
 23c:	fe cf       	rjmp	.-4      	; 0x23a <stopwatch+0x58>
				
				stop_beep();
 23e:	0e 94 a5 00 	call	0x14a	; 0x14a <stop_beep>
				stopwatch_enable = 0;
			}
		}
		OUTPUT_PORT = total_time;
 242:	08 b9       	out	0x08, r16	; 8
	}
	
}
 244:	cf 91       	pop	r28
 246:	1f 91       	pop	r17
 248:	0f 91       	pop	r16
 24a:	ff 90       	pop	r15
 24c:	ef 90       	pop	r14
 24e:	08 95       	ret

00000250 <timer_mode>:

void timer_mode()
{
 250:	1f 93       	push	r17
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
	unsigned char input = 0;
 256:	c0 e0       	ldi	r28, 0x00	; 0
	char inputmode = 1;
	while(inputmode)
	{
		if(bit_is_clear(BUTTON_PIN, TIMER_INPUT))
 258:	05 99       	sbic	0x00, 5	; 0
 25a:	03 c0       	rjmp	.+6      	; 0x262 <timer_mode+0x12>
		{
			tenth_delay();
 25c:	0e 94 7d 00 	call	0xfa	; 0xfa <tenth_delay>
			input++;
 260:	cf 5f       	subi	r28, 0xFF	; 255
		}
		if(bit_is_clear(BUTTON_PIN, TIMER_START))
 262:	04 99       	sbic	0x00, 4	; 0
 264:	f9 cf       	rjmp	.-14     	; 0x258 <timer_mode+0x8>
		{
			inputmode = 0;
			start_beep();
 266:	0e 94 9f 00 	call	0x13e	; 0x13e <start_beep>
		}
	}
	
	while(input > 0)
 26a:	cc 23       	and	r28, r28
 26c:	b9 f0       	breq	.+46     	; 0x29c <timer_mode+0x4c>
	{
		display(input-- % 10);
 26e:	1d ec       	ldi	r17, 0xCD	; 205
 270:	df ef       	ldi	r29, 0xFF	; 255
 272:	dc 0f       	add	r29, r28
 274:	c1 9f       	mul	r28, r17
 276:	81 2d       	mov	r24, r1
 278:	11 24       	eor	r1, r1
 27a:	86 95       	lsr	r24
 27c:	86 95       	lsr	r24
 27e:	86 95       	lsr	r24
 280:	88 0f       	add	r24, r24
 282:	98 2f       	mov	r25, r24
 284:	99 0f       	add	r25, r25
 286:	99 0f       	add	r25, r25
 288:	89 0f       	add	r24, r25
 28a:	c8 1b       	sub	r28, r24
 28c:	8c 2f       	mov	r24, r28
 28e:	0e 94 be 00 	call	0x17c	; 0x17c <display>
		tenth_delay();		
 292:	0e 94 7d 00 	call	0xfa	; 0xfa <tenth_delay>
		}
	}
	
	while(input > 0)
	{
		display(input-- % 10);
 296:	cd 2f       	mov	r28, r29
			inputmode = 0;
			start_beep();
		}
	}
	
	while(input > 0)
 298:	d1 11       	cpse	r29, r1
 29a:	ea cf       	rjmp	.-44     	; 0x270 <timer_mode+0x20>
	{
		display(input-- % 10);
		tenth_delay();		
	}
	
	while(bit_is_set(BUTTON_PIN, TIMER_START))
 29c:	04 9b       	sbis	0x00, 4	; 0
 29e:	06 c0       	rjmp	.+12     	; 0x2ac <timer_mode+0x5c>
	{
		start_beep();
 2a0:	0e 94 9f 00 	call	0x13e	; 0x13e <start_beep>
		tenth_delay();
 2a4:	0e 94 7d 00 	call	0xfa	; 0xfa <tenth_delay>
	{
		display(input-- % 10);
		tenth_delay();		
	}
	
	while(bit_is_set(BUTTON_PIN, TIMER_START))
 2a8:	04 99       	sbic	0x00, 4	; 0
 2aa:	fa cf       	rjmp	.-12     	; 0x2a0 <timer_mode+0x50>
	{
		start_beep();
		tenth_delay();
	}
}
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	1f 91       	pop	r17
 2b2:	08 95       	ret

000002b4 <main>:

//A constant character array that is the menu for selecting the timer modes

int main(void)
{
	display_init();
 2b4:	0e 94 b7 00 	call	0x16e	; 0x16e <display_init>
	stopwatch_init();
 2b8:	0e 94 b3 00 	call	0x166	; 0x166 <stopwatch_init>
	beep_init();
 2bc:	0e 94 9d 00 	call	0x13a	; 0x13a <beep_init>
	sei();
 2c0:	78 94       	sei
	OUTPUT_DDR = 0xFF;
 2c2:	8f ef       	ldi	r24, 0xFF	; 255
 2c4:	87 b9       	out	0x07, r24	; 7
	OUTPUT_PORT = 0x00;
 2c6:	18 b8       	out	0x08, r1	; 8
	
    while (1) 
    {
	    //while loop polls for received data keeps polling until a '1' or a '2' is received
	    while((bit_is_set( BUTTON_PIN, PINA0 )) | (bit_is_clear( BUTTON_PIN, PINA1 )) );
 2c8:	c1 e0       	ldi	r28, 0x01	; 1
 2ca:	90 b1       	in	r25, 0x00	; 0
 2cc:	80 b1       	in	r24, 0x00	; 0
 2ce:	86 95       	lsr	r24
 2d0:	81 70       	andi	r24, 0x01	; 1
 2d2:	8c 13       	cpse	r24, r28
 2d4:	fa cf       	rjmp	.-12     	; 0x2ca <main+0x16>
 2d6:	90 fd       	sbrc	r25, 0
 2d8:	f8 cf       	rjmp	.-16     	; 0x2ca <main+0x16>
	    
	    if(bit_is_clear( BUTTON_PIN, PINA0 ))
 2da:	00 99       	sbic	0x00, 0	; 0
 2dc:	04 c0       	rjmp	.+8      	; 0x2e6 <main+0x32>
	    {
			while ( bit_is_clear( BUTTON_PIN, PINA0 ) );
 2de:	00 9b       	sbis	0x00, 0	; 0
 2e0:	fe cf       	rjmp	.-4      	; 0x2de <main+0x2a>
		    stopwatch();  //Runs stopwatch mode if 1 was received
 2e2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <stopwatch>
	    }
	    if(bit_is_clear( BUTTON_PIN, PINA1 ))
 2e6:	01 99       	sbic	0x00, 1	; 0
 2e8:	f0 cf       	rjmp	.-32     	; 0x2ca <main+0x16>
	    {
			while ( bit_is_clear( BUTTON_PIN, PINA1 ) );
 2ea:	01 9b       	sbis	0x00, 1	; 0
 2ec:	fe cf       	rjmp	.-4      	; 0x2ea <main+0x36>
		    timer_mode(); //Runs in timer mode if 2 was received
 2ee:	0e 94 28 01 	call	0x250	; 0x250 <timer_mode>
 2f2:	eb cf       	rjmp	.-42     	; 0x2ca <main+0x16>

000002f4 <__tablejump2__>:
 2f4:	ee 0f       	add	r30, r30
 2f6:	ff 1f       	adc	r31, r31
 2f8:	05 90       	lpm	r0, Z+
 2fa:	f4 91       	lpm	r31, Z
 2fc:	e0 2d       	mov	r30, r0
 2fe:	09 94       	ijmp

00000300 <_exit>:
 300:	f8 94       	cli

00000302 <__stop_program>:
 302:	ff cf       	rjmp	.-2      	; 0x302 <__stop_program>
