
CPEproject2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c3a  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a37  00000000  00000000  00000fde  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000565  00000000  00000000  00001a15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  00001f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000588  00000000  00000000  00002068  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002ca  00000000  00000000  000025f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000028ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__ctors_end>
   4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  10:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  14:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  18:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  1c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  20:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  24:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  28:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  2c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  30:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  34:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  38:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  3c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  40:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  44:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  48:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  4c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  50:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  54:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  58:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  5c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  60:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  68:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  6c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  70:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  74:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  78:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  7c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  80:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  84:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  88:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  8c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  90:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  94:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  98:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  9c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  a0:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  a4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  a8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  ac:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  b0:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  b4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  b8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  bc:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  c0:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  c4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  c8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  cc:	93 00       	.word	0x0093	; ????
  ce:	97 00       	.word	0x0097	; ????
  d0:	9b 00       	.word	0x009b	; ????
  d2:	9f 00       	.word	0x009f	; ????
  d4:	a3 00       	.word	0x00a3	; ????
  d6:	a7 00       	.word	0x00a7	; ????
  d8:	aa 00       	.word	0x00aa	; ????
  da:	ae 00       	.word	0x00ae	; ????
  dc:	b2 00       	.word	0x00b2	; ????
  de:	b6 00       	.word	0x00b6	; ????
  e0:	ba 00       	.word	0x00ba	; ????

000000e2 <__ctors_end>:
  e2:	11 24       	eor	r1, r1
  e4:	1f be       	out	0x3f, r1	; 63
  e6:	cf ef       	ldi	r28, 0xFF	; 255
  e8:	d8 e0       	ldi	r29, 0x08	; 8
  ea:	de bf       	out	0x3e, r29	; 62
  ec:	cd bf       	out	0x3d, r28	; 61
  ee:	0e 94 18 01 	call	0x230	; 0x230 <main>
  f2:	0c 94 35 01 	jmp	0x26a	; 0x26a <_exit>

000000f6 <__bad_interrupt>:
  f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fa <beep_init>:
	BEEP_PORT = 0x10;
	for ( int i = 0; i < 5; i++ )
	{
		//hundredth_delay();
	}
	BEEP_PORT = 0x00;
  fa:	6c 9a       	sbi	0x0d, 4	; 13
  fc:	08 95       	ret

000000fe <stopwatch_init>:
}

void stopwatch_init()
{
	BUTTON_DDR = 0x00;
  fe:	11 b8       	out	0x01, r1	; 1
	BUTTON_PORT = 0xFF;
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	82 b9       	out	0x02, r24	; 2
 104:	08 95       	ret

00000106 <display_init>:
	display(10);
}

void display_init()
{
	DDRD = 0xFF;
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x20;
 10a:	80 e2       	ldi	r24, 0x20	; 32
 10c:	8d b9       	out	0x0d, r24	; 13
	PORTD = 0x00;
 10e:	1b b8       	out	0x0b, r1	; 11
	PORTE = 0x00;
 110:	1e b8       	out	0x0e, r1	; 14
 112:	08 95       	ret

00000114 <display>:
}
void display(char num)
{
	switch(num)
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	8b 30       	cpi	r24, 0x0B	; 11
 118:	91 05       	cpc	r25, r1
 11a:	70 f5       	brcc	.+92     	; 0x178 <display+0x64>
 11c:	fc 01       	movw	r30, r24
 11e:	ea 59       	subi	r30, 0x9A	; 154
 120:	ff 4f       	sbci	r31, 0xFF	; 255
 122:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__tablejump2__>
	{
		case 0:
			PORTD = 0xFF;
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 12a:	75 98       	cbi	0x0e, 5	; 14
			break;
 12c:	08 95       	ret
		case 1:
			PORTD = 0x01;
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 132:	75 98       	cbi	0x0e, 5	; 14
			break;
 134:	08 95       	ret
		case 2:
			PORTD = 0x02;
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 13a:	75 98       	cbi	0x0e, 5	; 14
			break;
 13c:	08 95       	ret
		case 3:
			PORTD = 0x04;
 13e:	84 e0       	ldi	r24, 0x04	; 4
 140:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 142:	75 98       	cbi	0x0e, 5	; 14
			break;
 144:	08 95       	ret
		case 4:
			PORTD = 0x08;
 146:	88 e0       	ldi	r24, 0x08	; 8
 148:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 14a:	75 98       	cbi	0x0e, 5	; 14
			break;
 14c:	08 95       	ret
		case 5:
			PORTD = 0x00;
 14e:	1b b8       	out	0x0b, r1	; 11
			PORTE |= (1<<PORTE5);
 150:	75 9a       	sbi	0x0e, 5	; 14
			break;
 152:	08 95       	ret
		case 6:
			PORTD = 0x10;
 154:	80 e1       	ldi	r24, 0x10	; 16
 156:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 158:	75 98       	cbi	0x0e, 5	; 14
			break;
 15a:	08 95       	ret
		case 7:
			PORTD = 0x20;
 15c:	80 e2       	ldi	r24, 0x20	; 32
 15e:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 160:	75 98       	cbi	0x0e, 5	; 14
			break;
 162:	08 95       	ret
		case 8:
			PORTD = 0x40;
 164:	80 e4       	ldi	r24, 0x40	; 64
 166:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 168:	75 98       	cbi	0x0e, 5	; 14
			break;
 16a:	08 95       	ret
		case 9:
			PORTD = 0x80;
 16c:	80 e8       	ldi	r24, 0x80	; 128
 16e:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 170:	75 98       	cbi	0x0e, 5	; 14
			break;
 172:	08 95       	ret
		case 10: //for display off
			PORTD = 0x00;
 174:	1b b8       	out	0x0b, r1	; 11
			PORTE &= ~(1<<PORTE5);
 176:	75 98       	cbi	0x0e, 5	; 14
 178:	08 95       	ret

0000017a <stopwatch>:
	BUTTON_DDR = 0x00;
	BUTTON_PORT = 0xFF;
}

void stopwatch()
{
 17a:	ef 92       	push	r14
 17c:	ff 92       	push	r15
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
	unsigned int total_time = 0;
	unsigned int split_time_checkpoint = 0;
	unsigned int split_time;
	unsigned int stopwatch_enable = 0;
	unsigned char stopwatch_counter = '0';
	OUTPUT_DDR = 0xFF;
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	87 b9       	out	0x07, r24	; 7
//	if ( bit_is_set( BUTTON_PIN, STOPWATCH_START ) )
//	{
		while ( bit_is_clear( BUTTON_PIN, STOPWATCH_START ) );
 188:	07 9b       	sbis	0x00, 7	; 0
 18a:	fe cf       	rjmp	.-4      	; 0x188 <stopwatch+0xe>
 18c:	01 e0       	ldi	r16, 0x01	; 1
 18e:	10 e0       	ldi	r17, 0x00	; 0
 190:	c0 e3       	ldi	r28, 0x30	; 48
 192:	e1 2c       	mov	r14, r1
 194:	f1 2c       	mov	r15, r1
 196:	01 c0       	rjmp	.+2      	; 0x19a <stopwatch+0x20>
 198:	8c 01       	movw	r16, r24
		
		while ( stopwatch_enable == 1 )
		{
			//tenth_delay();
			
			if ( stopwatch_counter == COUNTER_MAX )
 19a:	c9 30       	cpi	r28, 0x09	; 9
 19c:	29 f4       	brne	.+10     	; 0x1a8 <stopwatch+0x2e>
			{
				stopwatch_counter = '0';
				total_time++;
				display(stopwatch_counter);
 19e:	80 e3       	ldi	r24, 0x30	; 48
 1a0:	0e 94 8a 00 	call	0x114	; 0x114 <display>
		{
			//tenth_delay();
			
			if ( stopwatch_counter == COUNTER_MAX )
			{
				stopwatch_counter = '0';
 1a4:	c0 e3       	ldi	r28, 0x30	; 48
 1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <stopwatch+0x36>
				display(stopwatch_counter);
			}
			
			else
			{
				stopwatch_counter++;
 1a8:	cf 5f       	subi	r28, 0xFF	; 255
				total_time++;
				display(stopwatch_counter);
 1aa:	8c 2f       	mov	r24, r28
 1ac:	0e 94 8a 00 	call	0x114	; 0x114 <display>
			}
			
			//when pressed, finds the time since last split and outputs it to serial
			if(bit_is_set(BUTTON_PIN, STOPWATCH_SPLIT))
 1b0:	03 9b       	sbis	0x00, 3	; 0
 1b2:	07 c0       	rjmp	.+14     	; 0x1c2 <stopwatch+0x48>
			{
				while ( bit_is_set( BUTTON_PIN, STOPWATCH_SPLIT ) );
 1b4:	03 99       	sbic	0x00, 3	; 0
 1b6:	fe cf       	rjmp	.-4      	; 0x1b4 <stopwatch+0x3a>
				
				//Get the new checkpoint value to compare for next split
				split_time_checkpoint = total_time;
				
				//Output the split to serial
				OUTPUT_PORT = split_time;
 1b8:	c8 01       	movw	r24, r16
 1ba:	8e 19       	sub	r24, r14
 1bc:	9f 09       	sbc	r25, r15
 1be:	88 b9       	out	0x08, r24	; 8
 1c0:	78 01       	movw	r14, r16
 1c2:	c8 01       	movw	r24, r16
 1c4:	01 96       	adiw	r24, 0x01	; 1
				
			}
			
			if ( bit_is_set( BUTTON_PIN, STOPWATCH_STOP ) )
 1c6:	06 9b       	sbis	0x00, 6	; 0
 1c8:	e7 cf       	rjmp	.-50     	; 0x198 <stopwatch+0x1e>
			{
				while ( bit_is_set( BUTTON_PIN, STOPWATCH_STOP ) );
 1ca:	06 99       	sbic	0x00, 6	; 0
 1cc:	fe cf       	rjmp	.-4      	; 0x1ca <stopwatch+0x50>
				
				//stop_beep();
				stopwatch_enable = 0;
			}
		}
		OUTPUT_PORT = total_time;
 1ce:	08 b9       	out	0x08, r16	; 8
//	}
	
}
 1d0:	cf 91       	pop	r28
 1d2:	1f 91       	pop	r17
 1d4:	0f 91       	pop	r16
 1d6:	ff 90       	pop	r15
 1d8:	ef 90       	pop	r14
 1da:	08 95       	ret

000001dc <timer_mode>:

void timer_mode()
{
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
	unsigned char input = 0;
 1e0:	80 e0       	ldi	r24, 0x00	; 0
	char inputmode = 1;
	while(inputmode)
	{
		if(bit_is_set(BUTTON_PIN, TIMER_INPUT))
 1e2:	05 99       	sbic	0x00, 5	; 0
		{
			//tenth_delay();
			input++;
 1e4:	8f 5f       	subi	r24, 0xFF	; 255
		}
		if(bit_is_set(BUTTON_PIN, TIMER_START))
 1e6:	04 9b       	sbis	0x00, 4	; 0
 1e8:	fc cf       	rjmp	.-8      	; 0x1e2 <timer_mode+0x6>
			inputmode = 0;
			//start_beep();
		}
	}
	
	while(input > 0)
 1ea:	88 23       	and	r24, r24
 1ec:	a1 f0       	breq	.+40     	; 0x216 <timer_mode+0x3a>
	{
		display(input-- % 10);
 1ee:	dd ec       	ldi	r29, 0xCD	; 205
 1f0:	cf ef       	ldi	r28, 0xFF	; 255
 1f2:	c8 0f       	add	r28, r24
 1f4:	8d 9f       	mul	r24, r29
 1f6:	91 2d       	mov	r25, r1
 1f8:	11 24       	eor	r1, r1
 1fa:	96 95       	lsr	r25
 1fc:	96 95       	lsr	r25
 1fe:	96 95       	lsr	r25
 200:	99 0f       	add	r25, r25
 202:	29 2f       	mov	r18, r25
 204:	22 0f       	add	r18, r18
 206:	22 0f       	add	r18, r18
 208:	92 0f       	add	r25, r18
 20a:	89 1b       	sub	r24, r25
 20c:	0e 94 8a 00 	call	0x114	; 0x114 <display>
 210:	8c 2f       	mov	r24, r28
			inputmode = 0;
			//start_beep();
		}
	}
	
	while(input > 0)
 212:	c1 11       	cpse	r28, r1
 214:	ed cf       	rjmp	.-38     	; 0x1f0 <timer_mode+0x14>
	{
		display(input-- % 10);
		//tenth_delay();		
	}
	
	while(bit_is_clear(BUTTON_PIN, TIMER_START))
 216:	04 99       	sbic	0x00, 4	; 0
 218:	05 c0       	rjmp	.+10     	; 0x224 <timer_mode+0x48>
	{
		display(0);
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	0e 94 8a 00 	call	0x114	; 0x114 <display>
	{
		display(input-- % 10);
		//tenth_delay();		
	}
	
	while(bit_is_clear(BUTTON_PIN, TIMER_START))
 220:	04 9b       	sbis	0x00, 4	; 0
 222:	fb cf       	rjmp	.-10     	; 0x21a <timer_mode+0x3e>
	{
		display(0);
		//start_beep();
		//tenth_delay();
	}
	display(10);
 224:	8a e0       	ldi	r24, 0x0A	; 10
 226:	0e 94 8a 00 	call	0x114	; 0x114 <display>
}
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <main>:

//A constant character array that is the menu for selecting the timer modes

int main(void)
{
	display_init();
 230:	0e 94 83 00 	call	0x106	; 0x106 <display_init>
	stopwatch_init();
 234:	0e 94 7f 00 	call	0xfe	; 0xfe <stopwatch_init>
	beep_init();
 238:	0e 94 7d 00 	call	0xfa	; 0xfa <beep_init>
	sei();
 23c:	78 94       	sei
	OUTPUT_DDR = 0xFF;
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	87 b9       	out	0x07, r24	; 7
	OUTPUT_PORT = 0x00;
 242:	18 b8       	out	0x08, r1	; 8
    while (1) 
    {
	    //while loop polls for received data keeps polling until a '1' or a '2' is received
	    //while((bit_is_set( BUTTON_PIN, PINA0 )) || (bit_is_set( BUTTON_PIN, PINA1 )) );
	    
	    if(bit_is_set( BUTTON_PIN, PINA0 ))
 244:	00 9b       	sbis	0x00, 0	; 0
 246:	04 c0       	rjmp	.+8      	; 0x250 <main+0x20>
	    {
			while ( bit_is_set( BUTTON_PIN, PINA0 ) );
 248:	00 99       	sbic	0x00, 0	; 0
 24a:	fe cf       	rjmp	.-4      	; 0x248 <main+0x18>
		    stopwatch();  //Runs stopwatch mode if 1 was received
 24c:	0e 94 bd 00 	call	0x17a	; 0x17a <stopwatch>
	    }
	    if(bit_is_set( BUTTON_PIN, PINA1 ))
 250:	01 9b       	sbis	0x00, 1	; 0
 252:	f8 cf       	rjmp	.-16     	; 0x244 <main+0x14>
	    {
			while ( bit_is_set( BUTTON_PIN, PINA1 ) );
 254:	01 99       	sbic	0x00, 1	; 0
 256:	fe cf       	rjmp	.-4      	; 0x254 <main+0x24>
		    timer_mode(); //Runs in timer mode if 2 was received
 258:	0e 94 ee 00 	call	0x1dc	; 0x1dc <timer_mode>
 25c:	f3 cf       	rjmp	.-26     	; 0x244 <main+0x14>

0000025e <__tablejump2__>:
 25e:	ee 0f       	add	r30, r30
 260:	ff 1f       	adc	r31, r31
 262:	05 90       	lpm	r0, Z+
 264:	f4 91       	lpm	r31, Z
 266:	e0 2d       	mov	r30, r0
 268:	09 94       	ijmp

0000026a <_exit>:
 26a:	f8 94       	cli

0000026c <__stop_program>:
 26c:	ff cf       	rjmp	.-2      	; 0x26c <__stop_program>
