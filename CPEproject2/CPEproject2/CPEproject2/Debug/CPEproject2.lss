
CPEproject2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000041a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e99  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b7b  00000000  00000000  000013b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000062e  00000000  00000000  00001f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  00002560  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005f6  00000000  00000000  000026a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003c4  00000000  00000000  00002c96  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  0000305a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__ctors_end>
   4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  10:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  14:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  18:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  1c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  20:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  24:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  28:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  2c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  30:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  34:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  38:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  3c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  40:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  44:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  48:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  4c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  50:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  54:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  58:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  5c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  60:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  68:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  6c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  70:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  74:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  78:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  7c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  80:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  84:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  88:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  8c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  90:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  94:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  98:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  9c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  a0:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  a4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  a8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  ac:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  b0:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  b4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  b8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  bc:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  c0:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  c4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  c8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  cc:	1b 01       	movw	r2, r22
  ce:	1f 01       	movw	r2, r30
  d0:	23 01       	movw	r4, r6
  d2:	27 01       	movw	r4, r14
  d4:	2b 01       	movw	r4, r22
  d6:	2f 01       	movw	r4, r30
  d8:	32 01       	movw	r6, r4
  da:	36 01       	movw	r6, r12
  dc:	3a 01       	movw	r6, r20
  de:	3e 01       	movw	r6, r28
  e0:	42 01       	movw	r8, r4

000000e2 <__ctors_end>:
  e2:	11 24       	eor	r1, r1
  e4:	1f be       	out	0x3f, r1	; 63
  e6:	cf ef       	ldi	r28, 0xFF	; 255
  e8:	d8 e0       	ldi	r29, 0x08	; 8
  ea:	de bf       	out	0x3e, r29	; 62
  ec:	cd bf       	out	0x3d, r28	; 61
  ee:	0e 94 96 01 	call	0x32c	; 0x32c <main>
  f2:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <_exit>

000000f6 <__bad_interrupt>:
  f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fa <tenth_delay>:
	else
	{
		rx_value = '\0';
	}
	return rx_value;
}
  fa:	83 ef       	ldi	r24, 0xF3	; 243
  fc:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 100:	8b ec       	ldi	r24, 0xCB	; 203
 102:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 106:	84 e0       	ldi	r24, 0x04	; 4
 108:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 10c:	b0 9b       	sbis	0x16, 0	; 22
 10e:	fe cf       	rjmp	.-4      	; 0x10c <tenth_delay+0x12>
 110:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	86 bb       	out	0x16, r24	; 22
 118:	08 95       	ret

0000011a <hundredth_delay>:
 11a:	8e ef       	ldi	r24, 0xFE	; 254
 11c:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 120:	87 ec       	ldi	r24, 0xC7	; 199
 122:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 126:	84 e0       	ldi	r24, 0x04	; 4
 128:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 12c:	b0 9b       	sbis	0x16, 0	; 22
 12e:	fe cf       	rjmp	.-4      	; 0x12c <hundredth_delay+0x12>
 130:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	86 bb       	out	0x16, r24	; 22
 138:	08 95       	ret

0000013a <beep_init>:
 13a:	80 e1       	ldi	r24, 0x10	; 16
 13c:	8d b9       	out	0x0d, r24	; 13
 13e:	1e b8       	out	0x0e, r1	; 14
 140:	08 95       	ret

00000142 <start_beep>:
 142:	80 e1       	ldi	r24, 0x10	; 16
 144:	8e b9       	out	0x0e, r24	; 14
 146:	0e 94 7d 00 	call	0xfa	; 0xfa <tenth_delay>
 14a:	1e b8       	out	0x0e, r1	; 14
 14c:	08 95       	ret

0000014e <stop_beep>:
 14e:	80 e1       	ldi	r24, 0x10	; 16
 150:	8e b9       	out	0x0e, r24	; 14
 152:	0e 94 8d 00 	call	0x11a	; 0x11a <hundredth_delay>
 156:	0e 94 8d 00 	call	0x11a	; 0x11a <hundredth_delay>
 15a:	0e 94 8d 00 	call	0x11a	; 0x11a <hundredth_delay>
 15e:	0e 94 8d 00 	call	0x11a	; 0x11a <hundredth_delay>
 162:	0e 94 8d 00 	call	0x11a	; 0x11a <hundredth_delay>
 166:	1e b8       	out	0x0e, r1	; 14
 168:	08 95       	ret

0000016a <stopwatch_init>:
 16a:	11 b8       	out	0x01, r1	; 1
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	82 b9       	out	0x02, r24	; 2
 170:	08 95       	ret

00000172 <USART_Init>:
 172:	87 e6       	ldi	r24, 0x67	; 103
 174:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 178:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 17c:	e1 ec       	ldi	r30, 0xC1	; 193
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	88 61       	ori	r24, 0x18	; 24
 184:	80 83       	st	Z, r24
 186:	80 81       	ld	r24, Z
 188:	80 83       	st	Z, r24
 18a:	e2 ec       	ldi	r30, 0xC2	; 194
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	86 60       	ori	r24, 0x06	; 6
 192:	80 83       	st	Z, r24
 194:	80 81       	ld	r24, Z
 196:	87 7f       	andi	r24, 0xF7	; 247
 198:	80 83       	st	Z, r24
 19a:	08 95       	ret

0000019c <USART_TxChar>:

void USART_TxChar(char data)
{
	UDR0 = data; //Write data to be transmitting in UDR
 19c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	while (bit_is_clear(UCSR0A, TXC)); //Wait until data transmit and buffer get empty
 1a0:	e0 ec       	ldi	r30, 0xC0	; 192
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	86 ff       	sbrs	r24, 6
 1a8:	fd cf       	rjmp	.-6      	; 0x1a4 <USART_TxChar+0x8>
	UCSR0A |= ( 1<<TXC );
 1aa:	e0 ec       	ldi	r30, 0xC0	; 192
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	80 64       	ori	r24, 0x40	; 64
 1b2:	80 83       	st	Z, r24
 1b4:	08 95       	ret

000001b6 <serial_output>:
}

void serial_output(unsigned int output)
{
 1b6:	ef 92       	push	r14
 1b8:	ff 92       	push	r15
 1ba:	0f 93       	push	r16
 1bc:	1f 93       	push	r17
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	cd b7       	in	r28, 0x3d	; 61
 1c4:	de b7       	in	r29, 0x3e	; 62
 1c6:	a0 97       	sbiw	r28, 0x20	; 32
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	f8 94       	cli
 1cc:	de bf       	out	0x3e, r29	; 62
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1d2:	4a e0       	ldi	r20, 0x0A	; 10
 1d4:	be 01       	movw	r22, r28
 1d6:	6f 5f       	subi	r22, 0xFF	; 255
 1d8:	7f 4f       	sbci	r23, 0xFF	; 255
 1da:	0e 94 ac 01 	call	0x358	; 0x358 <__itoa_ncheck>
 1de:	8e 01       	movw	r16, r28
 1e0:	0f 5f       	subi	r16, 0xFF	; 255
 1e2:	1f 4f       	sbci	r17, 0xFF	; 255
 1e4:	7e 01       	movw	r14, r28
 1e6:	81 e2       	ldi	r24, 0x21	; 33
 1e8:	e8 0e       	add	r14, r24
 1ea:	f1 1c       	adc	r15, r1
	itoa( output, output_array, 10 );
	array_size = sizeof(output_array);
	
	for (  int i = 0; i < array_size; i++ )
	{
		USART_TxChar(output_array[i]);
 1ec:	f8 01       	movw	r30, r16
 1ee:	81 91       	ld	r24, Z+
 1f0:	8f 01       	movw	r16, r30
 1f2:	0e 94 ce 00 	call	0x19c	; 0x19c <USART_TxChar>
	char output_array[32];
	unsigned int array_size;
	itoa( output, output_array, 10 );
	array_size = sizeof(output_array);
	
	for (  int i = 0; i < array_size; i++ )
 1f6:	0e 15       	cp	r16, r14
 1f8:	1f 05       	cpc	r17, r15
 1fa:	c1 f7       	brne	.-16     	; 0x1ec <serial_output+0x36>
	{
		USART_TxChar(output_array[i]);
	}
}
 1fc:	a0 96       	adiw	r28, 0x20	; 32
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	f8 94       	cli
 202:	de bf       	out	0x3e, r29	; 62
 204:	0f be       	out	0x3f, r0	; 63
 206:	cd bf       	out	0x3d, r28	; 61
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	1f 91       	pop	r17
 20e:	0f 91       	pop	r16
 210:	ff 90       	pop	r15
 212:	ef 90       	pop	r14
 214:	08 95       	ret

00000216 <display_init>:
	}
}

void display_init()
{
	DDRD = 0xFF;
 216:	8f ef       	ldi	r24, 0xFF	; 255
 218:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x20;
 21a:	80 e2       	ldi	r24, 0x20	; 32
 21c:	8d b9       	out	0x0d, r24	; 13
	PORTD = 0x00;
 21e:	1b b8       	out	0x0b, r1	; 11
	PORTE = 0x00;
 220:	1e b8       	out	0x0e, r1	; 14
 222:	08 95       	ret

00000224 <display>:
}
void display(char num)
{
	switch(num)
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	8b 30       	cpi	r24, 0x0B	; 11
 228:	91 05       	cpc	r25, r1
 22a:	70 f5       	brcc	.+92     	; 0x288 <display+0x64>
 22c:	fc 01       	movw	r30, r24
 22e:	ea 59       	subi	r30, 0x9A	; 154
 230:	ff 4f       	sbci	r31, 0xFF	; 255
 232:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__tablejump2__>
	{
		case 0:
			PORTD = 0xFF;
 236:	8f ef       	ldi	r24, 0xFF	; 255
 238:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 23a:	75 98       	cbi	0x0e, 5	; 14
			break;
 23c:	08 95       	ret
		case 1:
			PORTD = 0x01;
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 242:	75 98       	cbi	0x0e, 5	; 14
			break;
 244:	08 95       	ret
		case 2:
			PORTD = 0x02;
 246:	82 e0       	ldi	r24, 0x02	; 2
 248:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 24a:	75 98       	cbi	0x0e, 5	; 14
			break;
 24c:	08 95       	ret
		case 3:
			PORTD = 0x04;
 24e:	84 e0       	ldi	r24, 0x04	; 4
 250:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 252:	75 98       	cbi	0x0e, 5	; 14
			break;
 254:	08 95       	ret
		case 4:
			PORTD = 0x08;
 256:	88 e0       	ldi	r24, 0x08	; 8
 258:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 25a:	75 98       	cbi	0x0e, 5	; 14
			break;
 25c:	08 95       	ret
		case 5:
			PORTD = 0x00;
 25e:	1b b8       	out	0x0b, r1	; 11
			PORTE |= (1<<PORTE5);
 260:	75 9a       	sbi	0x0e, 5	; 14
			break;
 262:	08 95       	ret
		case 6:
			PORTD = 0x10;
 264:	80 e1       	ldi	r24, 0x10	; 16
 266:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 268:	75 98       	cbi	0x0e, 5	; 14
			break;
 26a:	08 95       	ret
		case 7:
			PORTD = 0x20;
 26c:	80 e2       	ldi	r24, 0x20	; 32
 26e:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 270:	75 98       	cbi	0x0e, 5	; 14
			break;
 272:	08 95       	ret
		case 8:
			PORTD = 0x40;
 274:	80 e4       	ldi	r24, 0x40	; 64
 276:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 278:	75 98       	cbi	0x0e, 5	; 14
			break;
 27a:	08 95       	ret
		case 9:
			PORTD = 0x80;
 27c:	80 e8       	ldi	r24, 0x80	; 128
 27e:	8b b9       	out	0x0b, r24	; 11
			PORTE &= ~(1<<PORTE5);
 280:	75 98       	cbi	0x0e, 5	; 14
			break;
 282:	08 95       	ret
		case 10: //for display off
			PORTD = 0x00;
 284:	1b b8       	out	0x0b, r1	; 11
			PORTE &= ~(1<<PORTE5);
 286:	75 98       	cbi	0x0e, 5	; 14
 288:	08 95       	ret

0000028a <stopwatch>:
	BUTTON_DDR = 0x00;
	BUTTON_PORT = 0xFF;
}

unsigned int stopwatch()
{
 28a:	cf 93       	push	r28
	unsigned int total_time = 0;
	unsigned int stopwatch_enable = 0;
	unsigned char stopwatch_counter = '0';
	
	if ( bit_is_clear( BUTTON_PIN, STOPWATCH_START ) )
 28c:	07 99       	sbic	0x00, 7	; 0
 28e:	18 c0       	rjmp	.+48     	; 0x2c0 <stopwatch+0x36>
	{
		while ( bit_is_clear( BUTTON_PIN, STOPWATCH_START ) );
 290:	07 9b       	sbis	0x00, 7	; 0
 292:	fe cf       	rjmp	.-4      	; 0x290 <stopwatch+0x6>
		
		start_beep();
 294:	0e 94 a1 00 	call	0x142	; 0x142 <start_beep>

unsigned int stopwatch()
{
	unsigned int total_time = 0;
	unsigned int stopwatch_enable = 0;
	unsigned char stopwatch_counter = '0';
 298:	c0 e3       	ldi	r28, 0x30	; 48
		start_beep();
		stopwatch_enable = 1;
		
		while ( stopwatch_enable == 1 )
		{
			tenth_delay();
 29a:	0e 94 7d 00 	call	0xfa	; 0xfa <tenth_delay>
			
			if ( stopwatch_counter == COUNTER_MAX )
 29e:	c9 30       	cpi	r28, 0x09	; 9
 2a0:	29 f4       	brne	.+10     	; 0x2ac <stopwatch+0x22>
			{
				stopwatch_counter = '0';
				display(stopwatch_counter);
 2a2:	80 e3       	ldi	r24, 0x30	; 48
 2a4:	0e 94 12 01 	call	0x224	; 0x224 <display>
		{
			tenth_delay();
			
			if ( stopwatch_counter == COUNTER_MAX )
			{
				stopwatch_counter = '0';
 2a8:	c0 e3       	ldi	r28, 0x30	; 48
 2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <stopwatch+0x2a>
				display(stopwatch_counter);
			}
			
			else
			{
				stopwatch_counter++;
 2ac:	cf 5f       	subi	r28, 0xFF	; 255
				display(stopwatch_counter);
 2ae:	8c 2f       	mov	r24, r28
 2b0:	0e 94 12 01 	call	0x224	; 0x224 <display>
			}
			
			if ( bit_is_clear( BUTTON_PIN, STOPWATCH_STOP ) )
 2b4:	06 99       	sbic	0x00, 6	; 0
 2b6:	f1 cf       	rjmp	.-30     	; 0x29a <stopwatch+0x10>
			{
				while ( bit_is_clear( BUTTON_PIN, STOPWATCH_STOP ) );
 2b8:	06 9b       	sbis	0x00, 6	; 0
 2ba:	fe cf       	rjmp	.-4      	; 0x2b8 <stopwatch+0x2e>
				
				stop_beep();
 2bc:	0e 94 a7 00 	call	0x14e	; 0x14e <stop_beep>
				stopwatch_enable = 0;
			}
		}
	}
	return total_time;
}
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	cf 91       	pop	r28
 2c6:	08 95       	ret

000002c8 <timer_mode>:
		USART_TxChar(output_array[i]);
	}
}

void timer_mode()
{
 2c8:	1f 93       	push	r17
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
	unsigned char input = 0;
 2ce:	c0 e0       	ldi	r28, 0x00	; 0
	char inputmode = 1;
	while(inputmode)
	{
		if(bit_is_clear(BUTTON_PIN, TIMER_INPUT))
 2d0:	05 99       	sbic	0x00, 5	; 0
 2d2:	03 c0       	rjmp	.+6      	; 0x2da <timer_mode+0x12>
		{
			tenth_delay();
 2d4:	0e 94 7d 00 	call	0xfa	; 0xfa <tenth_delay>
			input++;
 2d8:	cf 5f       	subi	r28, 0xFF	; 255
		}
		if(bit_is_clear(BUTTON_PIN, TIMER_START))
 2da:	04 99       	sbic	0x00, 4	; 0
 2dc:	f9 cf       	rjmp	.-14     	; 0x2d0 <timer_mode+0x8>
		{
			inputmode = 0;
			start_beep();
 2de:	0e 94 a1 00 	call	0x142	; 0x142 <start_beep>
		}
	}
	
	while(input > 0)
 2e2:	cc 23       	and	r28, r28
 2e4:	b9 f0       	breq	.+46     	; 0x314 <timer_mode+0x4c>
	{
		display(input-- % 10);
 2e6:	1d ec       	ldi	r17, 0xCD	; 205
 2e8:	df ef       	ldi	r29, 0xFF	; 255
 2ea:	dc 0f       	add	r29, r28
 2ec:	c1 9f       	mul	r28, r17
 2ee:	81 2d       	mov	r24, r1
 2f0:	11 24       	eor	r1, r1
 2f2:	86 95       	lsr	r24
 2f4:	86 95       	lsr	r24
 2f6:	86 95       	lsr	r24
 2f8:	88 0f       	add	r24, r24
 2fa:	98 2f       	mov	r25, r24
 2fc:	99 0f       	add	r25, r25
 2fe:	99 0f       	add	r25, r25
 300:	89 0f       	add	r24, r25
 302:	c8 1b       	sub	r28, r24
 304:	8c 2f       	mov	r24, r28
 306:	0e 94 12 01 	call	0x224	; 0x224 <display>
		tenth_delay();		
 30a:	0e 94 7d 00 	call	0xfa	; 0xfa <tenth_delay>
		}
	}
	
	while(input > 0)
	{
		display(input-- % 10);
 30e:	cd 2f       	mov	r28, r29
			inputmode = 0;
			start_beep();
		}
	}
	
	while(input > 0)
 310:	d1 11       	cpse	r29, r1
 312:	ea cf       	rjmp	.-44     	; 0x2e8 <timer_mode+0x20>
	{
		display(input-- % 10);
		tenth_delay();		
	}
	
	while(bit_is_set(BUTTON_PIN, TIMER_START))
 314:	04 9b       	sbis	0x00, 4	; 0
 316:	06 c0       	rjmp	.+12     	; 0x324 <timer_mode+0x5c>
	{
		start_beep();
 318:	0e 94 a1 00 	call	0x142	; 0x142 <start_beep>
		tenth_delay();
 31c:	0e 94 7d 00 	call	0xfa	; 0xfa <tenth_delay>
	{
		display(input-- % 10);
		tenth_delay();		
	}
	
	while(bit_is_set(BUTTON_PIN, TIMER_START))
 320:	04 99       	sbic	0x00, 4	; 0
 322:	fa cf       	rjmp	.-12     	; 0x318 <timer_mode+0x50>
	{
		start_beep();
		tenth_delay();
	}
}
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	1f 91       	pop	r17
 32a:	08 95       	ret

0000032c <main>:
void USART_TxChar(char data);
void serial_output(unsigned int output);

int main(void)
{
	USART_Init();
 32c:	0e 94 b9 00 	call	0x172	; 0x172 <USART_Init>
	display_init();
 330:	0e 94 0b 01 	call	0x216	; 0x216 <display_init>
	stopwatch_init();
 334:	0e 94 b5 00 	call	0x16a	; 0x16a <stopwatch_init>
	beep_init();
 338:	0e 94 9d 00 	call	0x13a	; 0x13a <beep_init>
	sei();
 33c:	78 94       	sei
	
	unsigned int stopwatch_time = 0;
	
    while (1) 
    {
		stopwatch_time = stopwatch();
 33e:	0e 94 45 01 	call	0x28a	; 0x28a <stopwatch>
		serial_output(stopwatch_time);
 342:	0e 94 db 00 	call	0x1b6	; 0x1b6 <serial_output>
		timer_mode();
 346:	0e 94 64 01 	call	0x2c8	; 0x2c8 <timer_mode>
 34a:	f9 cf       	rjmp	.-14     	; 0x33e <main+0x12>

0000034c <__tablejump2__>:
 34c:	ee 0f       	add	r30, r30
 34e:	ff 1f       	adc	r31, r31
 350:	05 90       	lpm	r0, Z+
 352:	f4 91       	lpm	r31, Z
 354:	e0 2d       	mov	r30, r0
 356:	09 94       	ijmp

00000358 <__itoa_ncheck>:
 358:	bb 27       	eor	r27, r27
 35a:	4a 30       	cpi	r20, 0x0A	; 10
 35c:	31 f4       	brne	.+12     	; 0x36a <__itoa_ncheck+0x12>
 35e:	99 23       	and	r25, r25
 360:	22 f4       	brpl	.+8      	; 0x36a <__itoa_ncheck+0x12>
 362:	bd e2       	ldi	r27, 0x2D	; 45
 364:	90 95       	com	r25
 366:	81 95       	neg	r24
 368:	9f 4f       	sbci	r25, 0xFF	; 255
 36a:	0c 94 b8 01 	jmp	0x370	; 0x370 <__utoa_common>

0000036e <__utoa_ncheck>:
 36e:	bb 27       	eor	r27, r27

00000370 <__utoa_common>:
 370:	fb 01       	movw	r30, r22
 372:	55 27       	eor	r21, r21
 374:	aa 27       	eor	r26, r26
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	aa 1f       	adc	r26, r26
 37c:	a4 17       	cp	r26, r20
 37e:	10 f0       	brcs	.+4      	; 0x384 <__utoa_common+0x14>
 380:	a4 1b       	sub	r26, r20
 382:	83 95       	inc	r24
 384:	50 51       	subi	r21, 0x10	; 16
 386:	b9 f7       	brne	.-18     	; 0x376 <__utoa_common+0x6>
 388:	a0 5d       	subi	r26, 0xD0	; 208
 38a:	aa 33       	cpi	r26, 0x3A	; 58
 38c:	08 f0       	brcs	.+2      	; 0x390 <__utoa_common+0x20>
 38e:	a9 5d       	subi	r26, 0xD9	; 217
 390:	a1 93       	st	Z+, r26
 392:	00 97       	sbiw	r24, 0x00	; 0
 394:	79 f7       	brne	.-34     	; 0x374 <__utoa_common+0x4>
 396:	b1 11       	cpse	r27, r1
 398:	b1 93       	st	Z+, r27
 39a:	11 92       	st	Z+, r1
 39c:	cb 01       	movw	r24, r22
 39e:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <strrev>

000003a2 <strrev>:
 3a2:	dc 01       	movw	r26, r24
 3a4:	fc 01       	movw	r30, r24
 3a6:	67 2f       	mov	r22, r23
 3a8:	71 91       	ld	r23, Z+
 3aa:	77 23       	and	r23, r23
 3ac:	e1 f7       	brne	.-8      	; 0x3a6 <strrev+0x4>
 3ae:	32 97       	sbiw	r30, 0x02	; 2
 3b0:	04 c0       	rjmp	.+8      	; 0x3ba <strrev+0x18>
 3b2:	7c 91       	ld	r23, X
 3b4:	6d 93       	st	X+, r22
 3b6:	70 83       	st	Z, r23
 3b8:	62 91       	ld	r22, -Z
 3ba:	ae 17       	cp	r26, r30
 3bc:	bf 07       	cpc	r27, r31
 3be:	c8 f3       	brcs	.-14     	; 0x3b2 <strrev+0x10>
 3c0:	08 95       	ret

000003c2 <_exit>:
 3c2:	f8 94       	cli

000003c4 <__stop_program>:
 3c4:	ff cf       	rjmp	.-2      	; 0x3c4 <__stop_program>
